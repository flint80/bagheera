<?xml version='1.0' encoding='UTF-8'?>
<!-- This file is part of the DITA Open Toolkit project hosted on Sourceforge.net. 
	See the accompanying license.txt file for applicable licenses. --><!-- (c) Copyright IBM Corp. 2004, 2005 All Rights Reserved. --><!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../../dtd/concept.dtd" [
<!ENTITY bagheera_title SYSTEM "../constants/bagheera_title.dita">]>
<concept id="forum_script" xml:lang="ru_RU">
	<title>Обработка форума</title>
	<conbody>
		<fig>
			<title>Логика обработки форума</title>
			<p>
				<image href="figures/forum_logic.png" width="400"></image>
			</p>
		</fig>
		<p>
			В этом разделе описана логика обработки форума, шаблон которой
			задается декоратором
			<cmdname>ForumDecorator.groovy</cmdname>
			. Более детальную информацию по методам декоратора
			можно посмотреть в
			разделе
			<xref href="../appendices/forum_api.dita" />
			, либо анализируя код
			<cmdname>ForumDecorator.groovy</cmdname>
			. Обработка форума состоит из следующих этапов:
			<ol>
				<li>
					<b>Инициализация.</b>
					Декоратор инициализируется адресом логотипа, который используется
					как обложка книги.
					Этот параметр является опциональным.
				</li>
				<li>
					<b>Определение url ветки и начала периода.</b>
					На этом этапе у пользователя запрашивается url ветки форума. Кроме
					того, если в скрипте задействована
					функция
					<cmdname>useTimeStamp</cmdname>
					с параметром
					<cmdname>askForTimeStamp = true</cmdname>
					, то
					у пользователя также запрашивается дата начала периода, в
					который должны попадать сообщения из этой ветки.
				</li>
				<li>
					<b>Авторизация.</b>
					Если сконфигурированы авторизационные параметры, то производится
					логин на сайт. Далее загрузка страниц и других данных
					будет
					производится как бы от авторизованного пользователя.
				</li>
				<li>
					<b>Загрузка первой страницы.</b>
				</li>
				<li>
					<b>Определение заголовка форума.</b>
					На данном этапе используется метод
					<cmdname>extractTitle</cmdname>
					, которому в качестве аргумента передается контент первой страницы.
				</li>
				<li>
					Далее в цикле выполняются две операции:
					<p>
						<ol>
							<li>
								<b>Получение списка сообщений.</b>
								Выполняется метод
								<cmdname>extractMessages</cmdname>
								, которому в качестве аргумента передается контент первой
								страницы.
								Этот метод должен возвратить список
								<xref href="../appendices/supplementary_classes_message.dita" />
								.
							</li>
							<li>
								<b>Определение адреса следующей страницы.</b>
								Выполняется метод
								<cmdname>extractNextPageUrl</cmdname>
								, которому в качестве аргумента передается контент первой
								страницы и номер страницы 1.
								Этот метод должен возвратить список
								<xref href="../appendices/supplementary_classes_message.dita" />
								.
							</li>
							<li>
								<b>Загрузка очередной строницы.</b>
							</li>
						</ol>
					</p>
					Цикл завершается кода
					<cmdname>extractNextPageUrl</cmdname>
					возвращает пустую строку.
				</li>
				<li>
					<b>Фильтрация постов по дате.</b>
					В зависимости от выбранной даты начала периода, часть сообщений
					(а именно, сообщения, созданные ранее выбранной даты)
					игнорируется.
				</li>
				<li>
					<b>Постобработка сообщений.</b>
					Над каждым из отфильтрованных сообщений можно произвести
					дополнительные действия, например, загрузка вложений
					(attachment). Это производится в методе
					<cmdname>postProcessMessage</cmdname>
					.
				</li>
				<li>Создание FB2. На этом шаге генерируется контент FB2-книги.
				</li>
				<li>
					<b>Сохранение книги в файл.</b>
					На этом шаге контент сохраняется в файл на
					локальном диске в директории
					<cmdname>output</cmdname>
					.
					При автоматической генерации имя файла составляется из названия
					RSS-ленты и периода, за который запрошены новости.
					Вы можете
					изменить алгоритм генерации имени файла, используя метод
					<cmdname>buildFileName</cmdname>
					, в который в
					качестве аргумента передается Контекст выполнения
					скрипта.
				</li>
				<li>
					<b>Обновление временной метки.</b>
					Если конфигурируете скрипт функцией
					<cmdname>useTimeStamp</cmdname>
					с параметром
					<cmdname>confirmTimeStampValue = true</cmdname>
					(см шаг 2),
					то перед обновлением временной метки у пользователя
					запрашивается
					подтверждение.
				</li>
			</ol>
		</p>
		<p>
			Рассмотрим в качетсве примера скрипт обработки форума ForumHouse:
		</p>
		<codeblock>
<![CDATA[
//@ description Forum House
forum('http://www.forumhouse.ru/styles/fh/logo.png'){

	useTimeStamp(true,true)

	authorize{
		login{
			url 'http://www.forumhouse.ru/login/login/'
			loginField 'login'
			login 'testLogin'
			passwordField 'password'
			password 'testPassword'
		}

		logout{
			url 'http://www.forumhouse.ru/logout/'
			confirmLogout{
				String confirmUrl = it.findFirst('<a class="button primary LogOut" href="([^"]+?)">Выход</a>')
				return confirmUrl? 'http://www.forumhouse.ru/' + confirmUrl: null
			}
		}
	}

	conversion{ grayscale true }

	extractTitle {String content ->
		def res = content.findFirst('<div class="titleBar">\\s*<h1>(.+?)</h1>')
		return res? res: "Не удалось определить тему"
	}

	extractNextPageUrl{String content, int pageNumber->
		def res = content.findFirst('<a[^>]+?href="([^>]+?)"[^>]+?>Впер')
		return res? "http://www.forumhouse.ru/"+ res.trimAll(): null
	}
	extractMessages{String content ->
		List messages = []
		List<String> posts  = content.xFind{it.name() == 'li' && it.attribute('id')?.contains('post-')}
		for(String post : posts){
			//log "post is $post"
			ForumMessage message = new ForumMessage()
			message.author = post.findFirst('data-author="(.+?)"')
			if (!message.author) {
				logError('author is empty;post:\n\r' + post)
				message.author = 'автор'
			}
			String dateStr = post.findFirst('([0-9]{0,2}\\.[0-9]{0,2}.[0-9]{0,2})\\s+?в\\s+?[0-9]{0,2}:[0-9]{0,2}')
			//log "dateStr is $dateStr"
			if(dateStr){
				String timeStr = post.findFirst('[0-9]{0,2}\\.[0-9]{0,2}.[0-9]{0,2}\\s+?в\\s+?([0-9]{0,2}:[0-9]{0,2})')
				if(!timeStr){
					timeStr = '00:00'
					logWarning('time is undefined; post:\n\r' + post)
				}
				dateStr = dateStr.substring(0, dateStr.lastIndexOf('.')) + '.20'+ dateStr.substring(dateStr.lastIndexOf('.') + 1)
				dateStr = dateStr + '-'+timeStr
				//log "corrected dateStr is $dateStr"
				message.date = dateStr.parseDate('dd.MM.yyyy-HH:mm')
			} else{
				logError ('date is empty;post:\n\r' + post)
			}
			if(!message.date){
				logError ('date is empty;post:\n\r' + post)
				message.date = new Date()
			}

			def res = post.xFind{it.name()=='blockquote'}
			String contentStr = res.isEmpty()? null: res.get(0)
			//log 'content is '+ contentStr
			if(!contentStr) {
				logError('message is empty;post:\n\r' + post)
				showWarning('message is empty')
				contentStr = ' '
			}
			//log 'content is '+ contentStr
			contentStr = contentStr.deleteAll('<noindex>.+?</noindex>').trim()
			message.content = contentStr
			for(Node node: post.xGetNodes{it.name() == 'img' && it.attribute('src')!= null && !it.attribute('src').contains('attachments') && !it.attribute('src').contains('http')}){
				String imageURL = node.attribute('src')
				//log "original image URL is '$imageURL'"
				if(imageURL?.length() > 0){
					//log 'modified image URL is '+ "'http://www.forumhouse.ru/$imageURL'"
					message.content = message.content.replace(imageURL, "http://www.forumhouse.ru/$imageURL")
				}
			}
			for(Node node: post.xGetNodes{it.name() == 'a' && it.attribute('href')!= null && it.attribute('href').contains('attachments')&& !it.attribute('href').contains('/upload')}){
				message.content = message.content+"<p>${node.toXML()}</p>"
			}
			message.content = "<div>$message.content</div>"
			//log 'modified content is '+ message.content
			messages<<message
		}
		if (messages.isEmpty()) {
			logError('messages is empty;content:\n\r' + content)
			showWarning('messages are empty')
		}
		return messages
	}

	postProcessMessage{ForumMessage message ->
		Node node = message.content.xParse()
		//log "original message content is $message.content"
		if(!node){
			return
		}
		boolean updated = false
		for(Node item: node.xGet{it.name() == 'a' && it.attribute('href')?.contains('attachments')}){
			//log "all attachments string is $item"
			String attachementsURL = item.attribute('href')
			//log "real attachments URL is 'http://www.forumhouse.ru/$attachementsURL'"
			String defaultURL = item.xFind{it.name() == 'img'}?.attribute('src')
			if(!attachementsURL || attachementsURL.endsWith('attachments/')){
				attachementsURL = defaultURL
			}
			if(attachementsURL){
				String fileName = loadAttachment("http://www.forumhouse.ru/$attachementsURL")
				if(fileName){
					attachementsURL = fileName
					item.replaceNode{a{img('src': attachementsURL)}}
					//log "attachment was saved to $fileName"
				} else if(defaultURL){
					logWarning "attachment was not saved, using default url"
					item.replaceNode{a{img('src': "http://www.forumhouse.ru/$defaultURL".toString())}}
				} else{
					logWarning "attachment can not be loaded"
					item.parent().remove(node)
				}
				updated = true
			}
		}
		if(updated){
			message.content =  node.toXML()
			//log "updated message content is $message.content"
		}
	}

}
]]>		
		</codeblock>
		<p>
			Строка
			<codeblock>
//@ description Forum House		
		</codeblock>
			задает название скрипта в списке доступных скриптов.
		</p>
		<p>
			Следующая строка
			<codeblock>
forum('http://www.forumhouse.ru/styles/fh/logo.png')		
		</codeblock>
			открывает блок конфигурации форума, при этом задается url обложки для
			генерируемой книги.
		</p>
		<p>
			Строка
			<codeblock>
useTimeStamp(true,true)
		</codeblock>
			задает настройку, согласно которой перед созданием книги у
			пользователя запрашивается подтверждение
			даты начала периода, а после создания запрашивается подтверждение на
			обновление временной метки.
		</p>
		<p>
			Блок
			<cmdname>authorize{...}</cmdname>
			описывает параметры авторизации на сайт форума. В подблоке
			<cmdname>login</cmdname>
			указывается, что страница логина находится по адресу
			<cmdname>http://www.forumhouse.ru/login/login/</cmdname>
			,
			что текстовое поле логина имеет идентификатор
			<cmdname>login</cmdname>
			(об этом я узнал, открыв страничку в Firefox
			и воспользовавшись утилитой FireBug), текстовое поле пароля имеет
			идентификатор
			<cmdname>password</cmdname>
			, и что в эти поля
			нужно вводить значения 'testLogin' и 'testPassword', соответственно
			(естественно, эти значения нужно заменить на данные Вашей учетной
			записи).
		</p>
		<p>
			В подблоке
			<cmdname>logout</cmdname>
			указывается, что выход с сайта осуществляется через страницу
			<cmdname>http://www.forumhouse.ru/logout/</cmdname>
			.
			После перехода на эту страничку отображается окно подтверждения выхода.
			Это окно - тоже html-страничка, на которой нудно найти кнопку с
			названием Выход, определить адрес, на который эта кнопка
			перенаправляет, и перейти по этому адресу.
		</p>
		<p>
			В блоке
			<cmdname>conversion{...}</cmdname>
			указывается, что загруженные картинки должны быть преобразованы в
			черно-белые изображения.
		</p>
		<p>
			В блоке
			<cmdname>extractTitle {...}</cmdname>
			описан алгоритм определения названия ветки форума на основе контента
			первой страницы форума.
			Для определения названия используется регулярное выражение.
		</p>
		<p>
			В блоке
			<cmdname>extractNextPageUrl{...}</cmdname>
			описан алгоритм определения адреса следующей странички форума на
			основе контента текущей страницы.
		</p>
		<p>Самый сложный блок - это <cmdname>extractMessages{...}</cmdname>, который описывает алгоритм создания списка сообщений на 
		основе контента страницы. В этом блоке активно пользуется фильтрация на основе xPath-выражений. Значения этих выражений
		я также нашел  помощью FireBug.
		</p>
		<p>В цикле
		<codeblock> 
<![CDATA[		
for(Node node: post.xGetNodes{it.name() == 'img' 
	&& it.attribute('src')!= null 
	&& !it.attribute('src').contains('attachments') 
	&& !it.attribute('src').contains('http')}){
	String imageURL = node.attribute('src')
    //log "original image URL is '$imageURL'"
	if(imageURL?.length() > 0){
		//log 'modified image URL is '+ "'http://www.forumhouse.ru/$imageURL'"
		message.content = message.content.replace(imageURL, "http://www.forumhouse.ru/$imageURL")
	}
}	
]]>	
</codeblock>
к контенту сообщения добавляются ссылки на "обычные" изображения, в которых относительный путь заменяется на абсолютный.	
		</p>
		<p>
		В цикле 
		<codeblock><![CDATA[	
for(Node node: post.xGetNodes{it.name() == 'a' 
	&& it.attribute('href')!= null 
	&& it.attribute('href').contains('attachments')
	&& !it.attribute('href').contains('/upload')}){
		message.content = message.content+"<p>${node.toXML()}</p>"
}		
]]>		</codeblock>
		к контенту сообщения добавляются ссылки на вложения. Позже эти блоки будут обработаны по отдельному алгоритму.
		</p>
<p>
Наконец, в строке 
<codeblock><![CDATA[	
message.content = "<div>$message.content</div>"
]]></codeblock>
контент сообщения оборачивается в тег div, чтобы в дальнейшем можно было использовать xPath выражения.
</p>		
<p>В блоке <cmdname>postProcessMessage{...}</cmdname> дополнительно обрабатываются изображения, прикрепленные к посту в качестве вложений.
Здесь производится загрузка вложения на локальный диск, а в контенте сообщения ссылка на изображение подменяется локальной ссылкой.
Так как загрузка вложения разрешена лишь для авторизованных пользователей, то становится понятным, зачем мы авторизовались в начале скрипта.
Может возникнуть вопрос, почему мы загружаем изображения здесь, а не в блоке <cmdname>extractMessages</cmdname>. Дело в том, что 
в FB2-книжку могут попасть не все посты, а лишь посты, начиная с определенной даты. В этом случае загрузку вложений нужно провести не для всех постов,
а только для тех, которые попаду в <cmdname>postProcessMessage{...}</cmdname>.
</p>
 <p>
 Теперь у Вас должно обще представление о работе с форумами. Для справок пользуйте информацию из
			<xref href="../appendices/appendices.dita">Приложений</xref>
 </p>
	</conbody>
</concept>
