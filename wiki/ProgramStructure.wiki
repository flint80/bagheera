= Структура программы =


[http://bagheera.googlecode.com/svn/trunk/help/using_program/figures/program_structure.png]

 Структуру программы Багира условно можно разделить на две части:

  * Ядро программы. Это набор файлов, скомпилированных в библиотеку. Эту часть программы пользователь менять не может. Ядро - это, по сути, графический интерфейс для взаимодействия с пользователем и набор библиотечных функций, позволяющих получать данные из сети и создавать FB2 книги.
  * Скрипты для работы с данными. Это набор groovy скриптов, которые и задают логику создания книги из того, или иного источника: RSS-ленты, или форума. Эту файлы можно редактировать. Обработка новой RSS-ленты или форума, сводится к добавлению очередного скрипта.

 Обработка, различных RSS-лент имеет очень много общих моментов, поэтому оказалось удобным выделить _Шаблон_ для RSS-лент. Логика обработки конкретной RSS-ленты при этом сводится к написанию сравнительно небольшого скрипта для конфигурации шаблона. Именно такой скрипт мы рассматривали в разделе Первые шаги . В итоге, скрипты были поделены на 2 категории:

  * Декораторы. Это шаблоны и ряд вспомогательных полезных функций. Они располагаются в директории decorators. Слово decorators(декараторы) символизирует то, что скрипты декорируют контекст, в котором работают скрипты пользователя.
  * Скрипты пользователя. Это сравнительно небольшие скрипты, содержащие логику работы с конкретной RSS-лентой или форумом.

 Рассмотрим на примере RSS-ленты _Компьютерры_ алгоритм работы декораторов:

{{{

showMessage 'готовим книжку - ждите...'
rss('http://feeds.feedburner.com/ct_news?format=xml', 'http://www.computerra.ru/new/logo2.gif'){
	useTimeStamp(true,false)
	updateItem{
		String content = loadAsString it.relatedURL
		if(content){
			content = content.findFirst('<div id="content">(.*)<div id="fin">', '<!-- start -->(.*)<!-- fin -->', '<div id="content">(.*)')
			content = content.deleteAll('<form.+?/form>','<noscript.+?/noscript>', '<iframe.+?/>')
			it.htmlContent = content
		}
	}
}
showMessage 'генерация книжки завершена'			

}}}

Здесь функция showMessage 'готовим книжку - ждите...' - это вспомогательная функция, которая появилась в результате отработки декоратора CommunicationsDecorator.groovy .

А вот блок rss(...){...} - это результат применения шаблона RssDecorator.groovy . Аргументы (...) - это простые параметры конфигурации RSS-шаблона (адрес новостной ленты и ссылка на логотип). Внутри блока {...} находятся функции дополнительной конфигурации шаблона(в нашем случае, это useTimeStamp и updateItem ). Эти функции переопределяют стандартные реализации из шаблона RssDecorator.groovy .

Более подробно декораторы будут рассмотрены в следующих разделах.

Важным понятием является Контекст выполнения скрипта. Контекст - это, по сути, набор пар Ключ-Значение, который доступен в скрипте под кодовым словом binding . При этом значение может быть как объектом, так и функцией. Перед началом выполнения скрипта Контекст создается и инициализируется некоторыми стандартными парами. В процессе выполнения скрипта Вы можете добавлять в контекст дополнительные пары. Это может быть полезно если Вы получаете значение в одной функции, а затем хотите использовать его в другой функции.

 Чтобы положить в контекст, например, значение "testValue" под кодом "testKey", используйте следующее выражение:

{{{

binding.testKey = testValue

}}}

Пары, которые добавляются в контекст при инициализации, описаны в разделе [Context Контекст]
